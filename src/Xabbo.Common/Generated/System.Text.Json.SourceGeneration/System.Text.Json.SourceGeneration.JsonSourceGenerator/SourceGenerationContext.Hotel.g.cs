// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Xabbo
{
    internal partial class SourceGenerationContext
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Xabbo.Hotel>? _Hotel;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Xabbo.Hotel> Hotel
        {
            get => _Hotel ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Xabbo.Hotel>)Options.GetTypeInfo(typeof(global::Xabbo.Hotel));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Xabbo.Hotel> Create_Hotel(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::Xabbo.Hotel>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::Xabbo.Hotel> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::Xabbo.Hotel>
                {
                    ObjectCreator = null,
                    ObjectWithParameterizedConstructorCreator = static args => new global::Xabbo.Hotel((string)args[0], (string)args[1], (string)args[2], (string)args[3], (string)args[4], (string)args[5]){ HostName = (string)args[6] },
                    PropertyMetadataInitializer = _ => HotelPropInit(options),
                    ConstructorParameterMetadataInitializer = HotelCtorParamInit,
                    SerializeHandler = HotelSerializeHandler
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::Xabbo.Hotel>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] HotelPropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[7];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).Name,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Name",
                JsonPropertyName = null
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).Identifier,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Identifier",
                JsonPropertyName = null
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).Subdomain,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Subdomain",
                JsonPropertyName = null
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info2);

            var info3 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).Domain,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Domain",
                JsonPropertyName = null
            };
            
            properties[3] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info3);

            var info4 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).HostName,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "HostName",
                JsonPropertyName = null
            };
            
            properties[4] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info4);

            var info5 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).WebHost,
                Setter = null,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "WebHost",
                JsonPropertyName = null
            };
            
            properties[5] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info5);

            var info6 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::Xabbo.Hotel),
                Converter = null,
                Getter = static obj => ((global::Xabbo.Hotel)obj).GameHost,
                Setter = static (obj, value) => throw new global::System.InvalidOperationException("Setting init-only properties is not supported in source generation mode."),
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "GameHost",
                JsonPropertyName = null
            };
            
            properties[6] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info6);

            return properties;
        }

        // Intentionally not a static method because we create a delegate to it. Invoking delegates to instance
        // methods is almost as fast as virtual calls. Static methods need to go through a shuffle thunk.
        private void HotelSerializeHandler(global::System.Text.Json.Utf8JsonWriter writer, global::Xabbo.Hotel? value)
        {
            if (value == null)
            {
                writer.WriteNullValue();
                return;
            }
            
            writer.WriteStartObject();

            writer.WriteString(PropName_Name, ((global::Xabbo.Hotel)value).Name);
            writer.WriteString(PropName_Identifier, ((global::Xabbo.Hotel)value).Identifier);
            writer.WriteString(PropName_Subdomain, ((global::Xabbo.Hotel)value).Subdomain);
            writer.WriteString(PropName_Domain, ((global::Xabbo.Hotel)value).Domain);
            writer.WriteString(PropName_HostName, ((global::Xabbo.Hotel)value).HostName);
            writer.WriteString(PropName_WebHost, ((global::Xabbo.Hotel)value).WebHost);
            writer.WriteString(PropName_GameHost, ((global::Xabbo.Hotel)value).GameHost);

            writer.WriteEndObject();
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[] HotelCtorParamInit()
        {
            var parameters = new global::System.Text.Json.Serialization.Metadata.JsonParameterInfoValues[7];

            parameters[0] = new()
            {
                Name = "name",
                ParameterType = typeof(string),
                Position = 0,
                HasDefaultValue = false,
                DefaultValue = default(string)
            };
            
            parameters[1] = new()
            {
                Name = "identifier",
                ParameterType = typeof(string),
                Position = 1,
                HasDefaultValue = true,
                DefaultValue = default(string)
            };
            
            parameters[2] = new()
            {
                Name = "subdomain",
                ParameterType = typeof(string),
                Position = 2,
                HasDefaultValue = true,
                DefaultValue = "www"
            };
            
            parameters[3] = new()
            {
                Name = "domain",
                ParameterType = typeof(string),
                Position = 3,
                HasDefaultValue = true,
                DefaultValue = "com"
            };
            
            parameters[4] = new()
            {
                Name = "host",
                ParameterType = typeof(string),
                Position = 4,
                HasDefaultValue = true,
                DefaultValue = "habbo"
            };
            
            parameters[5] = new()
            {
                Name = "gameHost",
                ParameterType = typeof(string),
                Position = 5,
                HasDefaultValue = true,
                DefaultValue = default(string)
            };
            
            parameters[6] = new()
            {
                Name = "HostName",
                ParameterType = typeof(string),
                Position = 6,
            };
            
            return parameters;
        }
    }
}
